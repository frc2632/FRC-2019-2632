// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2632.MyRobot.subsystems;


//import org.usfirst.frc2632.MyRobot.OI;
import org.usfirst.frc2632.MyRobot.RobotMap;
import org.usfirst.frc2632.MyRobot.commands.*;
//import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
//import edu.wpi.first.wpilibj.PIDOutput;
//import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.GenericHID.Hand;
import edu.wpi.first.wpilibj.XboxController;


import com.ctre.phoenix.motorcontrol.can.*;

//import java.awt.Robot;
//import java.sql.DriverPropertyInfo;

import edu.wpi.first.wpilibj.drive.DifferentialDrive;



/**
 *
 
public class DriveTrainSubsystem extends Subsystem {

    
    private WPI_TalonSRX LRSpeedController;
    private WPI_TalonSRX LFSpeedController;
    private WPI_TalonSRX RRSpeedController;
    private WPI_TalonSRX RFSpeedController;
    private DifferentialDrive driveTrain;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public DriveTrainSubsystem() {

        //The two letters in front of speed controller stand for its location 
        //ie. LF=Left Front, RR= Right Rear.
        LFSpeedController = new WPI_TalonSRX(RobotMap.LFMOTORCONTROLLER);
        LRSpeedController = new WPI_TalonSRX(RobotMap.LRMOTORCONTROLLER);
        LRSpeedController.setInverted(false);
        LFSpeedController.setInverted(false);
        
        RFSpeedController = new WPI_TalonSRX(RobotMap.RFMOTORCONTROLLER);
        RRSpeedController = new WPI_TalonSRX(RobotMap.RRMOTORCONTROLLER);
        RRSpeedController.setInverted(false);
        RFSpeedController.setInverted(false);
        
        SpeedControllerGroup LeftSpeedControllers = new SpeedControllerGroup(LFSpeedController, LRSpeedController);
        SpeedControllerGroup RightSpeedControllers = new SpeedControllerGroup(RFSpeedController, RRSpeedController);
        
        //driveTrain = new DifferentialDrive(LeftSpeedControllers, RightSpeedControllers);
        driveTrain = new DifferentialDrive(LeftSpeedControllers, RightSpeedControllers);
        driveTrain.setRightSideInverted(false);

    }

    @Override
    public void initDefaultCommand() {
        
        // Set the default command for a subsystem here.
         setDefaultCommand(new Drive());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
        
    }


    public void tank(double leftSpeed, double rightSpeed){
        driveTrain.tankDrive(leftSpeed, rightSpeed);

    }
    public void tank(XboxController controller){
        tank(-(controller.getY(Hand.kLeft)*.75), (controller.getY(Hand.kRight)*.75));

    }
    public void arcade(XboxController controller){
        driveTrain.arcadeDrive((controller.getX(Hand.kLeft)*.75), (controller.getY(Hand.kLeft)*.75));
    }
    public void arcade(double rotation, double throttle){
        driveTrain.arcadeDrive(rotation, throttle);
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

*/